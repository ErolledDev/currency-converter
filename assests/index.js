(function () { const t = document.createElement("link").relList; if (t && t.supports && t.supports("modulepreload")) return; for (const a of document.querySelectorAll('link[rel="modulepreload"]')) r(a); new MutationObserver(a => { for (const o of a) if (o.type === "childList") for (const i of o.addedNodes) i.tagName === "LINK" && i.rel === "modulepreload" && r(i) }).observe(document, { childList: !0, subtree: !0 }); function n(a) { const o = {}; return a.integrity && (o.integrity = a.integrity), a.referrerPolicy && (o.referrerPolicy = a.referrerPolicy), a.crossOrigin === "use-credentials" ? o.credentials = "include" : a.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function r(a) { if (a.ep) return; a.ep = !0; const o = n(a); fetch(a.href, o) } })(); function Q() { console.log("Navigation initialized") } function y(e) { const t = Object.prototype.toString.call(e); return e instanceof Date || typeof e == "object" && t === "[object Date]" ? new e.constructor(+e) : typeof e == "number" || t === "[object Number]" || typeof e == "string" || t === "[object String]" ? new Date(e) : new Date(NaN) } function P(e, t) { return e instanceof Date ? new e.constructor(t) : new Date(t) } const q = 6048e5, _ = 864e5; let X = {}; function E() { return X } function D(e, t) { var u, l, f, c; const n = E(), r = (t == null ? void 0 : t.weekStartsOn) ?? ((l = (u = t == null ? void 0 : t.locale) == null ? void 0 : u.options) == null ? void 0 : l.weekStartsOn) ?? n.weekStartsOn ?? ((c = (f = n.locale) == null ? void 0 : f.options) == null ? void 0 : c.weekStartsOn) ?? 0, a = y(e), o = a.getDay(), i = (o < r ? 7 : 0) + o - r; return a.setDate(a.getDate() - i), a.setHours(0, 0, 0, 0), a } function k(e) { return D(e, { weekStartsOn: 1 }) } function H(e) { const t = y(e), n = t.getFullYear(), r = P(e, 0); r.setFullYear(n + 1, 0, 4), r.setHours(0, 0, 0, 0); const a = k(r), o = P(e, 0); o.setFullYear(n, 0, 4), o.setHours(0, 0, 0, 0); const i = k(o); return t.getTime() >= a.getTime() ? n + 1 : t.getTime() >= i.getTime() ? n : n - 1 } function T(e) { const t = y(e); return t.setHours(0, 0, 0, 0), t } function C(e) { const t = y(e), n = new Date(Date.UTC(t.getFullYear(), t.getMonth(), t.getDate(), t.getHours(), t.getMinutes(), t.getSeconds(), t.getMilliseconds())); return n.setUTCFullYear(t.getFullYear()), +e - +n } function A(e, t) { const n = T(e), r = T(t), a = +n - C(n), o = +r - C(r); return Math.round((a - o) / _) } function G(e) { const t = H(e), n = P(e, 0); return n.setFullYear(t, 0, 4), n.setHours(0, 0, 0, 0), k(n) } function $(e) { return e instanceof Date || typeof e == "object" && Object.prototype.toString.call(e) === "[object Date]" } function U(e) { if (!$(e) && typeof e != "number") return !1; const t = y(e); return !isNaN(Number(t)) } function V(e) { const t = y(e), n = P(e, 0); return n.setFullYear(t.getFullYear(), 0, 1), n.setHours(0, 0, 0, 0), n } const z = { lessThanXSeconds: { one: "less than a second", other: "less than {{count}} seconds" }, xSeconds: { one: "1 second", other: "{{count}} seconds" }, halfAMinute: "half a minute", lessThanXMinutes: { one: "less than a minute", other: "less than {{count}} minutes" }, xMinutes: { one: "1 minute", other: "{{count}} minutes" }, aboutXHours: { one: "about 1 hour", other: "about {{count}} hours" }, xHours: { one: "1 hour", other: "{{count}} hours" }, xDays: { one: "1 day", other: "{{count}} days" }, aboutXWeeks: { one: "about 1 week", other: "about {{count}} weeks" }, xWeeks: { one: "1 week", other: "{{count}} weeks" }, aboutXMonths: { one: "about 1 month", other: "about {{count}} months" }, xMonths: { one: "1 month", other: "{{count}} months" }, aboutXYears: { one: "about 1 year", other: "about {{count}} years" }, xYears: { one: "1 year", other: "{{count}} years" }, overXYears: { one: "over 1 year", other: "over {{count}} years" }, almostXYears: { one: "almost 1 year", other: "almost {{count}} years" } }, J = (e, t, n) => { let r; const a = z[e]; return typeof a == "string" ? r = a : t === 1 ? r = a.one : r = a.other.replace("{{count}}", t.toString()), n != null && n.addSuffix ? n.comparison && n.comparison > 0 ? "in " + r : r + " ago" : r }; function S(e) { return (t = {}) => { const n = t.width ? String(t.width) : e.defaultWidth; return e.formats[n] || e.formats[e.defaultWidth] } } const K = { full: "EEEE, MMMM do, y", long: "MMMM do, y", medium: "MMM d, y", short: "MM/dd/yyyy" }, Z = { full: "h:mm:ss a zzzz", long: "h:mm:ss a z", medium: "h:mm:ss a", short: "h:mm a" }, ee = { full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: "{{date}}, {{time}}", short: "{{date}}, {{time}}" }, te = { date: S({ formats: K, defaultWidth: "full" }), time: S({ formats: Z, defaultWidth: "full" }), dateTime: S({ formats: ee, defaultWidth: "full" }) }, ne = { lastWeek: "'last' eeee 'at' p", yesterday: "'yesterday at' p", today: "'today at' p", tomorrow: "'tomorrow at' p", nextWeek: "eeee 'at' p", other: "P" }, re = (e, t, n, r) => ne[e]; function M(e) { return (t, n) => { const r = n != null && n.context ? String(n.context) : "standalone"; let a; if (r === "formatting" && e.formattingValues) { const i = e.defaultFormattingWidth || e.defaultWidth, u = n != null && n.width ? String(n.width) : i; a = e.formattingValues[u] || e.formattingValues[i] } else { const i = e.defaultWidth, u = n != null && n.width ? String(n.width) : e.defaultWidth; a = e.values[u] || e.values[i] } const o = e.argumentCallback ? e.argumentCallback(t) : t; return a[o] } } const ae = { narrow: ["B", "A"], abbreviated: ["BC", "AD"], wide: ["Before Christ", "Anno Domini"] }, oe = { narrow: ["1", "2", "3", "4"], abbreviated: ["Q1", "Q2", "Q3", "Q4"], wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"] }, ie = { narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }, se = { narrow: ["S", "M", "T", "W", "T", "F", "S"], short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] }, ce = { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" } }, ue = { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" } }, de = (e, t) => { const n = Number(e), r = n % 100; if (r > 20 || r < 10) switch (r % 10) { case 1: return n + "st"; case 2: return n + "nd"; case 3: return n + "rd" }return n + "th" }, le = { ordinalNumber: de, era: M({ values: ae, defaultWidth: "wide" }), quarter: M({ values: oe, defaultWidth: "wide", argumentCallback: e => e - 1 }), month: M({ values: ie, defaultWidth: "wide" }), day: M({ values: se, defaultWidth: "wide" }), dayPeriod: M({ values: ce, defaultWidth: "wide", formattingValues: ue, defaultFormattingWidth: "wide" }) }; function x(e) { return (t, n = {}) => { const r = n.width, a = r && e.matchPatterns[r] || e.matchPatterns[e.defaultMatchWidth], o = t.match(a); if (!o) return null; const i = o[0], u = r && e.parsePatterns[r] || e.parsePatterns[e.defaultParseWidth], l = Array.isArray(u) ? he(u, h => h.test(i)) : fe(u, h => h.test(i)); let f; f = e.valueCallback ? e.valueCallback(l) : l, f = n.valueCallback ? n.valueCallback(f) : f; const c = t.slice(i.length); return { value: f, rest: c } } } function fe(e, t) { for (const n in e) if (Object.prototype.hasOwnProperty.call(e, n) && t(e[n])) return n } function he(e, t) { for (let n = 0; n < e.length; n++)if (t(e[n])) return n } function me(e) { return (t, n = {}) => { const r = t.match(e.matchPattern); if (!r) return null; const a = r[0], o = t.match(e.parsePattern); if (!o) return null; let i = e.valueCallback ? e.valueCallback(o[0]) : o[0]; i = n.valueCallback ? n.valueCallback(i) : i; const u = t.slice(a.length); return { value: i, rest: u } } } const ge = /^(\d+)(th|st|nd|rd)?/i, we = /\d+/i, ye = { narrow: /^(b|a)/i, abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i, wide: /^(before christ|before common era|anno domini|common era)/i }, be = { any: [/^b/i, /^(a|c)/i] }, ve = { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234](th|st|nd|rd)? quarter/i }, pe = { any: [/1/i, /2/i, /3/i, /4/i] }, Pe = { narrow: /^[jfmasond]/i, abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i }, Oe = { narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i], any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] }, Me = { narrow: /^[smtwf]/i, short: /^(su|mo|tu|we|th|fr|sa)/i, abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i, wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i }, xe = { narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i], any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i] }, De = { narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i, any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i }, ke = { any: { am: /^a/i, pm: /^p/i, midnight: /^mi/i, noon: /^no/i, morning: /morning/i, afternoon: /afternoon/i, evening: /evening/i, night: /night/i } }, Ee = { ordinalNumber: me({ matchPattern: ge, parsePattern: we, valueCallback: e => parseInt(e, 10) }), era: x({ matchPatterns: ye, defaultMatchWidth: "wide", parsePatterns: be, defaultParseWidth: "any" }), quarter: x({ matchPatterns: ve, defaultMatchWidth: "wide", parsePatterns: pe, defaultParseWidth: "any", valueCallback: e => e + 1 }), month: x({ matchPatterns: Pe, defaultMatchWidth: "wide", parsePatterns: Oe, defaultParseWidth: "any" }), day: x({ matchPatterns: Me, defaultMatchWidth: "wide", parsePatterns: xe, defaultParseWidth: "any" }), dayPeriod: x({ matchPatterns: De, defaultMatchWidth: "any", parsePatterns: ke, defaultParseWidth: "any" }) }, Se = { code: "en-US", formatDistance: J, formatLong: te, formatRelative: re, localize: le, match: Ee, options: { weekStartsOn: 0, firstWeekContainsDate: 1 } }; function We(e) { const t = y(e); return A(t, V(t)) + 1 } function Te(e) { const t = y(e), n = +k(t) - +G(t); return Math.round(n / q) + 1 } function R(e, t) { var c, h, g, w; const n = y(e), r = n.getFullYear(), a = E(), o = (t == null ? void 0 : t.firstWeekContainsDate) ?? ((h = (c = t == null ? void 0 : t.locale) == null ? void 0 : c.options) == null ? void 0 : h.firstWeekContainsDate) ?? a.firstWeekContainsDate ?? ((w = (g = a.locale) == null ? void 0 : g.options) == null ? void 0 : w.firstWeekContainsDate) ?? 1, i = P(e, 0); i.setFullYear(r + 1, 0, o), i.setHours(0, 0, 0, 0); const u = D(i, t), l = P(e, 0); l.setFullYear(r, 0, o), l.setHours(0, 0, 0, 0); const f = D(l, t); return n.getTime() >= u.getTime() ? r + 1 : n.getTime() >= f.getTime() ? r : r - 1 } function Ce(e, t) { var u, l, f, c; const n = E(), r = (t == null ? void 0 : t.firstWeekContainsDate) ?? ((l = (u = t == null ? void 0 : t.locale) == null ? void 0 : u.options) == null ? void 0 : l.firstWeekContainsDate) ?? n.firstWeekContainsDate ?? ((c = (f = n.locale) == null ? void 0 : f.options) == null ? void 0 : c.firstWeekContainsDate) ?? 1, a = R(e, t), o = P(e, 0); return o.setFullYear(a, 0, r), o.setHours(0, 0, 0, 0), D(o, t) } function Ye(e, t) { const n = y(e), r = +D(n, t) - +Ce(n, t); return Math.round(r / q) + 1 } function s(e, t) { const n = e < 0 ? "-" : "", r = Math.abs(e).toString().padStart(t, "0"); return n + r } const b = { y(e, t) { const n = e.getFullYear(), r = n > 0 ? n : 1 - n; return s(t === "yy" ? r % 100 : r, t.length) }, M(e, t) { const n = e.getMonth(); return t === "M" ? String(n + 1) : s(n + 1, 2) }, d(e, t) { return s(e.getDate(), t.length) }, a(e, t) { const n = e.getHours() / 12 >= 1 ? "pm" : "am"; switch (t) { case "a": case "aa": return n.toUpperCase(); case "aaa": return n; case "aaaaa": return n[0]; case "aaaa": default: return n === "am" ? "a.m." : "p.m." } }, h(e, t) { return s(e.getHours() % 12 || 12, t.length) }, H(e, t) { return s(e.getHours(), t.length) }, m(e, t) { return s(e.getMinutes(), t.length) }, s(e, t) { return s(e.getSeconds(), t.length) }, S(e, t) { const n = t.length, r = e.getMilliseconds(), a = Math.trunc(r * Math.pow(10, n - 3)); return s(a, t.length) } }, O = { midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, Y = { G: function (e, t, n) { const r = e.getFullYear() > 0 ? 1 : 0; switch (t) { case "G": case "GG": case "GGG": return n.era(r, { width: "abbreviated" }); case "GGGGG": return n.era(r, { width: "narrow" }); case "GGGG": default: return n.era(r, { width: "wide" }) } }, y: function (e, t, n) { if (t === "yo") { const r = e.getFullYear(), a = r > 0 ? r : 1 - r; return n.ordinalNumber(a, { unit: "year" }) } return b.y(e, t) }, Y: function (e, t, n, r) { const a = R(e, r), o = a > 0 ? a : 1 - a; if (t === "YY") { const i = o % 100; return s(i, 2) } return t === "Yo" ? n.ordinalNumber(o, { unit: "year" }) : s(o, t.length) }, R: function (e, t) { const n = H(e); return s(n, t.length) }, u: function (e, t) { const n = e.getFullYear(); return s(n, t.length) }, Q: function (e, t, n) { const r = Math.ceil((e.getMonth() + 1) / 3); switch (t) { case "Q": return String(r); case "QQ": return s(r, 2); case "Qo": return n.ordinalNumber(r, { unit: "quarter" }); case "QQQ": return n.quarter(r, { width: "abbreviated", context: "formatting" }); case "QQQQQ": return n.quarter(r, { width: "narrow", context: "formatting" }); case "QQQQ": default: return n.quarter(r, { width: "wide", context: "formatting" }) } }, q: function (e, t, n) { const r = Math.ceil((e.getMonth() + 1) / 3); switch (t) { case "q": return String(r); case "qq": return s(r, 2); case "qo": return n.ordinalNumber(r, { unit: "quarter" }); case "qqq": return n.quarter(r, { width: "abbreviated", context: "standalone" }); case "qqqqq": return n.quarter(r, { width: "narrow", context: "standalone" }); case "qqqq": default: return n.quarter(r, { width: "wide", context: "standalone" }) } }, M: function (e, t, n) { const r = e.getMonth(); switch (t) { case "M": case "MM": return b.M(e, t); case "Mo": return n.ordinalNumber(r + 1, { unit: "month" }); case "MMM": return n.month(r, { width: "abbreviated", context: "formatting" }); case "MMMMM": return n.month(r, { width: "narrow", context: "formatting" }); case "MMMM": default: return n.month(r, { width: "wide", context: "formatting" }) } }, L: function (e, t, n) { const r = e.getMonth(); switch (t) { case "L": return String(r + 1); case "LL": return s(r + 1, 2); case "Lo": return n.ordinalNumber(r + 1, { unit: "month" }); case "LLL": return n.month(r, { width: "abbreviated", context: "standalone" }); case "LLLLL": return n.month(r, { width: "narrow", context: "standalone" }); case "LLLL": default: return n.month(r, { width: "wide", context: "standalone" }) } }, w: function (e, t, n, r) { const a = Ye(e, r); return t === "wo" ? n.ordinalNumber(a, { unit: "week" }) : s(a, t.length) }, I: function (e, t, n) { const r = Te(e); return t === "Io" ? n.ordinalNumber(r, { unit: "week" }) : s(r, t.length) }, d: function (e, t, n) { return t === "do" ? n.ordinalNumber(e.getDate(), { unit: "date" }) : b.d(e, t) }, D: function (e, t, n) { const r = We(e); return t === "Do" ? n.ordinalNumber(r, { unit: "dayOfYear" }) : s(r, t.length) }, E: function (e, t, n) { const r = e.getDay(); switch (t) { case "E": case "EE": case "EEE": return n.day(r, { width: "abbreviated", context: "formatting" }); case "EEEEE": return n.day(r, { width: "narrow", context: "formatting" }); case "EEEEEE": return n.day(r, { width: "short", context: "formatting" }); case "EEEE": default: return n.day(r, { width: "wide", context: "formatting" }) } }, e: function (e, t, n, r) { const a = e.getDay(), o = (a - r.weekStartsOn + 8) % 7 || 7; switch (t) { case "e": return String(o); case "ee": return s(o, 2); case "eo": return n.ordinalNumber(o, { unit: "day" }); case "eee": return n.day(a, { width: "abbreviated", context: "formatting" }); case "eeeee": return n.day(a, { width: "narrow", context: "formatting" }); case "eeeeee": return n.day(a, { width: "short", context: "formatting" }); case "eeee": default: return n.day(a, { width: "wide", context: "formatting" }) } }, c: function (e, t, n, r) { const a = e.getDay(), o = (a - r.weekStartsOn + 8) % 7 || 7; switch (t) { case "c": return String(o); case "cc": return s(o, t.length); case "co": return n.ordinalNumber(o, { unit: "day" }); case "ccc": return n.day(a, { width: "abbreviated", context: "standalone" }); case "ccccc": return n.day(a, { width: "narrow", context: "standalone" }); case "cccccc": return n.day(a, { width: "short", context: "standalone" }); case "cccc": default: return n.day(a, { width: "wide", context: "standalone" }) } }, i: function (e, t, n) { const r = e.getDay(), a = r === 0 ? 7 : r; switch (t) { case "i": return String(a); case "ii": return s(a, t.length); case "io": return n.ordinalNumber(a, { unit: "day" }); case "iii": return n.day(r, { width: "abbreviated", context: "formatting" }); case "iiiii": return n.day(r, { width: "narrow", context: "formatting" }); case "iiiiii": return n.day(r, { width: "short", context: "formatting" }); case "iiii": default: return n.day(r, { width: "wide", context: "formatting" }) } }, a: function (e, t, n) { const a = e.getHours() / 12 >= 1 ? "pm" : "am"; switch (t) { case "a": case "aa": return n.dayPeriod(a, { width: "abbreviated", context: "formatting" }); case "aaa": return n.dayPeriod(a, { width: "abbreviated", context: "formatting" }).toLowerCase(); case "aaaaa": return n.dayPeriod(a, { width: "narrow", context: "formatting" }); case "aaaa": default: return n.dayPeriod(a, { width: "wide", context: "formatting" }) } }, b: function (e, t, n) { const r = e.getHours(); let a; switch (r === 12 ? a = O.noon : r === 0 ? a = O.midnight : a = r / 12 >= 1 ? "pm" : "am", t) { case "b": case "bb": return n.dayPeriod(a, { width: "abbreviated", context: "formatting" }); case "bbb": return n.dayPeriod(a, { width: "abbreviated", context: "formatting" }).toLowerCase(); case "bbbbb": return n.dayPeriod(a, { width: "narrow", context: "formatting" }); case "bbbb": default: return n.dayPeriod(a, { width: "wide", context: "formatting" }) } }, B: function (e, t, n) { const r = e.getHours(); let a; switch (r >= 17 ? a = O.evening : r >= 12 ? a = O.afternoon : r >= 4 ? a = O.morning : a = O.night, t) { case "B": case "BB": case "BBB": return n.dayPeriod(a, { width: "abbreviated", context: "formatting" }); case "BBBBB": return n.dayPeriod(a, { width: "narrow", context: "formatting" }); case "BBBB": default: return n.dayPeriod(a, { width: "wide", context: "formatting" }) } }, h: function (e, t, n) { if (t === "ho") { let r = e.getHours() % 12; return r === 0 && (r = 12), n.ordinalNumber(r, { unit: "hour" }) } return b.h(e, t) }, H: function (e, t, n) { return t === "Ho" ? n.ordinalNumber(e.getHours(), { unit: "hour" }) : b.H(e, t) }, K: function (e, t, n) { const r = e.getHours() % 12; return t === "Ko" ? n.ordinalNumber(r, { unit: "hour" }) : s(r, t.length) }, k: function (e, t, n) { let r = e.getHours(); return r === 0 && (r = 24), t === "ko" ? n.ordinalNumber(r, { unit: "hour" }) : s(r, t.length) }, m: function (e, t, n) { return t === "mo" ? n.ordinalNumber(e.getMinutes(), { unit: "minute" }) : b.m(e, t) }, s: function (e, t, n) { return t === "so" ? n.ordinalNumber(e.getSeconds(), { unit: "second" }) : b.s(e, t) }, S: function (e, t) { return b.S(e, t) }, X: function (e, t, n) { const r = e.getTimezoneOffset(); if (r === 0) return "Z"; switch (t) { case "X": return L(r); case "XXXX": case "XX": return p(r); case "XXXXX": case "XXX": default: return p(r, ":") } }, x: function (e, t, n) { const r = e.getTimezoneOffset(); switch (t) { case "x": return L(r); case "xxxx": case "xx": return p(r); case "xxxxx": case "xxx": default: return p(r, ":") } }, O: function (e, t, n) { const r = e.getTimezoneOffset(); switch (t) { case "O": case "OO": case "OOO": return "GMT" + F(r, ":"); case "OOOO": default: return "GMT" + p(r, ":") } }, z: function (e, t, n) { const r = e.getTimezoneOffset(); switch (t) { case "z": case "zz": case "zzz": return "GMT" + F(r, ":"); case "zzzz": default: return "GMT" + p(r, ":") } }, t: function (e, t, n) { const r = Math.trunc(e.getTime() / 1e3); return s(r, t.length) }, T: function (e, t, n) { const r = e.getTime(); return s(r, t.length) } }; function F(e, t = "") { const n = e > 0 ? "-" : "+", r = Math.abs(e), a = Math.trunc(r / 60), o = r % 60; return o === 0 ? n + String(a) : n + String(a) + t + s(o, 2) } function L(e, t) { return e % 60 === 0 ? (e > 0 ? "-" : "+") + s(Math.abs(e) / 60, 2) : p(e, t) } function p(e, t = "") { const n = e > 0 ? "-" : "+", r = Math.abs(e), a = s(Math.trunc(r / 60), 2), o = s(r % 60, 2); return n + a + t + o } const N = (e, t) => { switch (e) { case "P": return t.date({ width: "short" }); case "PP": return t.date({ width: "medium" }); case "PPP": return t.date({ width: "long" }); case "PPPP": default: return t.date({ width: "full" }) } }, B = (e, t) => { switch (e) { case "p": return t.time({ width: "short" }); case "pp": return t.time({ width: "medium" }); case "ppp": return t.time({ width: "long" }); case "pppp": default: return t.time({ width: "full" }) } }, Fe = (e, t) => { const n = e.match(/(P+)(p+)?/) || [], r = n[1], a = n[2]; if (!a) return N(e, t); let o; switch (r) { case "P": o = t.dateTime({ width: "short" }); break; case "PP": o = t.dateTime({ width: "medium" }); break; case "PPP": o = t.dateTime({ width: "long" }); break; case "PPPP": default: o = t.dateTime({ width: "full" }); break }return o.replace("{{date}}", N(r, t)).replace("{{time}}", B(a, t)) }, Le = { p: B, P: Fe }, Ne = /^D+$/, qe = /^Y+$/, He = ["D", "DD", "YY", "YYYY"]; function Re(e) { return Ne.test(e) } function Be(e) { return qe.test(e) } function Ie(e, t, n) { const r = je(e, t, n); if (console.warn(r), He.includes(e)) throw new RangeError(r) } function je(e, t, n) { const r = e[0] === "Y" ? "years" : "days of the month"; return `Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md` } const Qe = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g, _e = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g, Xe = /^'([^]*?)'?$/, Ae = /''/g, Ge = /[a-zA-Z]/; function $e(e, t, n) { var c, h, g, w; const r = E(), a = r.locale ?? Se, o = r.firstWeekContainsDate ?? ((h = (c = r.locale) == null ? void 0 : c.options) == null ? void 0 : h.firstWeekContainsDate) ?? 1, i = r.weekStartsOn ?? ((w = (g = r.locale) == null ? void 0 : g.options) == null ? void 0 : w.weekStartsOn) ?? 0, u = y(e); if (!U(u)) throw new RangeError("Invalid time value"); let l = t.match(_e).map(m => { const d = m[0]; if (d === "p" || d === "P") { const v = Le[d]; return v(m, a.formatLong) } return m }).join("").match(Qe).map(m => { if (m === "''") return { isToken: !1, value: "'" }; const d = m[0]; if (d === "'") return { isToken: !1, value: Ue(m) }; if (Y[d]) return { isToken: !0, value: m }; if (d.match(Ge)) throw new RangeError("Format string contains an unescaped latin alphabet character `" + d + "`"); return { isToken: !1, value: m } }); a.localize.preprocessor && (l = a.localize.preprocessor(u, l)); const f = { firstWeekContainsDate: o, weekStartsOn: i, locale: a }; return l.map(m => { if (!m.isToken) return m.value; const d = m.value; (Be(d) || Re(d)) && Ie(d, t, String(e)); const v = Y[d[0]]; return v(u, d, a.localize, f) }).join("") } function Ue(e) { const t = e.match(Xe); return t ? t[1].replace(Ae, "'") : e } const Ve = "https://api.frankfurter.dev/v1"; async function W(e = "USD") { const t = new Date().getTime(), n = await fetch(`${Ve}/latest?base=${e}&_=${t}`, { headers: { "Cache-Control": "no-cache", Pragma: "no-cache" } }); if (!n.ok) throw new Error(`Failed to fetch exchange rates: ${n.status}`); const r = await n.json(); return { base: r.base, date: r.date, rates: r.rates } } function ze(e, t, n) { return typeof e != "number" || isNaN(e) || typeof n != "number" || n <= 0 ? 0 : e / t * n } function Je() { const e = new URLSearchParams(window.location.search); e.has("amount") && (document.getElementById("amount").value = e.get("amount")), e.has("from") && (document.getElementById("fromCurrency").value = e.get("from")), e.has("to") && (document.getElementById("toCurrency").value = e.get("to")) } function Ke({ amount: e, from: t, to: n }) { const r = new URL(window.location); r.searchParams.set("amount", e), r.searchParams.set("from", t), r.searchParams.set("to", n), window.history.pushState({}, "", r) } function Ze() {
  const e = document.getElementById("hero-container"); e.innerHTML = `
    <section class="hero">
      <div class="hero-content">
        <h1>Real-Time Currency Converter</h1>
        <p>Convert currencies with live exchange rates</p>
        
        <div class="converter-card">
          <div class="last-update"></div>
          <div class="converter-form">
            <div class="input-group">
              <input type="number" id="amount" value="1" min="0" step="any">
              <select id="fromCurrency">
                <option value="USD">USD</option>
              </select>
            </div>
            
            <button id="swap-currencies" class="swap-btn">⇄</button>
            
            <div class="input-group">
              <input type="number" id="result" readonly>
              <select id="toCurrency">
                <option value="EUR">EUR</option>
              </select>
            </div>
          </div>
          
          <button id="convert" class="convert-btn">Convert</button>
          <p id="rate-info" class="rate-info"></p>
        </div>
      </div>
    </section>
  `, et()
} async function et() { const e = document.getElementById("amount"), t = document.getElementById("fromCurrency"), n = document.getElementById("toCurrency"), r = document.getElementById("result"), a = document.getElementById("rate-info"), o = document.getElementById("swap-currencies"), i = document.getElementById("convert"), u = document.querySelector(".last-update"); let l = 0; const f = 6e4; try { const c = await W(); if (!c || !c.rates || typeof c.rates != "object") throw new Error("Invalid exchange rates data"); t.innerHTML = "", n.innerHTML = "", Object.keys(c.rates).forEach(g => { t.add(new Option(g, g)), n.add(new Option(g, g)) }), t.add(new Option(c.base, c.base)), n.add(new Option(c.base, c.base)), t.value = c.base, n.value = Object.keys(c.rates)[0]; async function h(g = !1) { try { const w = Date.now(), m = g || w - l >= f; let d; if (m ? (d = await W(t.value), l = w) : d = await W(t.value), !d || !d.rates || typeof d.rates != "object") throw new Error("Invalid exchange rates data"); const v = d.rates[n.value]; if (v === void 0 && n.value !== d.base) throw new Error(`Exchange rate not available for ${n.value}`); const I = ze(parseFloat(e.value) || 0, 1, n.value === d.base ? 1 : v); r.value = I.toFixed(2), a.textContent = `1 ${t.value} = ${(n.value === d.base ? 1 : v).toFixed(4)} ${n.value}`; const j = new Date; u.textContent = `Last updated: ${$e(j, "PPP p")}`, Ke({ amount: e.value, from: t.value, to: n.value }) } catch (w) { console.error("Conversion error:", w), a.textContent = w.message || "Error performing conversion. Please try again.", r.value = "", u.textContent = "" } } i.addEventListener("click", () => h(!0)), e.addEventListener("input", () => h(!1)), t.addEventListener("change", () => h(!0)), n.addEventListener("change", () => h(!0)), o.addEventListener("click", () => { const g = t.value; t.value = n.value, n.value = g, h(!0) }), setInterval(() => h(!0), f), await h(!0) } catch (c) { console.error("Initialization error:", c), a.textContent = c.message || "Error loading exchange rates. Please refresh the page.", u.textContent = "" } } function tt() {
  const e = document.getElementById("features-container"); e.innerHTML = `
    <section class="features">
      <div class="features-grid">
        <div class="feature-card">
          <h3>Real-Time Rates</h3>
          <p>Get up-to-the-minute exchange rates for all major world currencies</p>
        </div>
        
        <div class="feature-card">
          <h3>Historical Data</h3>
          <p>Track currency trends with our comprehensive historical data</p>
        </div>
        
        <div class="feature-card">
          <h3>Multiple Currencies</h3>
          <p>Support for over 30 major world currencies</p>
        </div>
        
        <div class="feature-card">
          <h3>Fast & Reliable</h3>
          <p>Quick conversions with reliable, accurate exchange rates</p>
        </div>
      </div>
    </section>
  `} function nt() {
  const e = document.getElementById("footer-container"); e.innerHTML = `
    <footer class="footer">
      <div class="footer-content">
        <div class="footer-section">
          <h4>Currency Exchange</h4>
          <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/historical-rates">Historical Rates</a></li>
            <li><a href="/currency-charts">Currency Charts</a></li>
          </ul>
        </div>
        
        <div class="footer-section">
          <h4>Resources</h4>
          <ul>
            <li><a href="/about">About Us</a></li>
            <li><a href="/faq">FAQ</a></li>
            <li><a href="/contact">Contact</a></li>
          </ul>
        </div>
        
        <div class="footer-section">
          <h4>Legal</h4>
          <ul>
            <li><a href="/privacy">Privacy Policy</a></li>
            <li><a href="/terms">Terms of Service</a></li>
            <li><a href="/disclaimer">Disclaimer</a></li>
          </ul>
        </div>
      </div>
      
      <div class="footer-bottom">
        <p>&copy; ${new Date().getFullYear()} Currency Exchange. All rights reserved.</p>
      </div>
    </footer>
  `} document.addEventListener("DOMContentLoaded", () => { Q(), Ze(), tt(), nt(), Je() });


